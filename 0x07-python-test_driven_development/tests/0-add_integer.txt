The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import the function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding 3 and 4
    >>> add_integer(3, 4)
    7

Subtracting 101 and 1
    >>> add_integer(101, -1)
    100

Adding 2.1 and 98
    >>> add_integer(2.1, 98)
    100

Subtracting 102.3 and 2
	    >>> add_integer(100.3, -2)
	    100

Adding an integer number and a string
    >>> add_integer(4, "Kaysee")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing None
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a character and a number
    >>> add_integer('3', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding two letters
    >>> add_integer('3', '9')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((3, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number plus a list
    >>> add_integer(133, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing strings
    >>> add_integer("Hello World")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two floating numbers
    >>> add_integer(2.3, 2.3)
    4

Subtracting 98 and 1
    >>> add_integer(-1)
    97

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
	      ...
    ValueError: cannot convert float NaN to integer
